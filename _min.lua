local a='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'function dec(b)b=string.gsub(b,'[^'..a..'=]','')return b:gsub('.',function(c)if c=='='then return''end;local d,e='',a:find(c)-1;for f=6,1,-1 do d=d..(e%2^f-e%2^(f-1)>0 and'1'or'0')end;return d end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(c)if#c~=8 then return''end;local g=0;for f=1,8 do g=g+(c:sub(f,f)=='1'and 2^(8-f)or 0)end;return string.char(g)end)end;local json=(function()local h={_version="0.1.2"}local i;local j={["\\"]="\\",["\""]="\"",["\b"]="b",["\f"]="f",["\n"]="n",["\r"]="r",["\t"]="t"}local k={["/"]="/"}for l,m in pairs(j)do k[m]=l end;local function n(g)return"\\"..(j[g]or string.format("u%04x",g:byte()))end;local function o(p)return"null"end;local function q(p,r)local s={}r=r or{}if r[p]then error("circular reference")end;r[p]=true;if rawget(p,1)~=nil or next(p)==nil then local t=0;for l in pairs(p)do if type(l)~="number"then error("invalid table: mixed or invalid key types")end;t=t+1 end;if t~=#p then error("invalid table: sparse array")end;for f,m in ipairs(p)do table.insert(s,i(m,r))end;r[p]=nil;return"["..table.concat(s,",").."]"else for l,m in pairs(p)do if type(l)~="string"then error("invalid table: mixed or invalid key types")end;table.insert(s,i(l,r)..":"..i(m,r))end;r[p]=nil;return"{"..table.concat(s,",").."}"end end;local function u(p)return'"'..p:gsub('[%z\1-\31\\"]',n)..'"'end;local function v(p)if p~=p or p<=-math.huge or p>=math.huge then error("unexpected number value '"..tostring(p).."'")end;return string.format("%.14g",p)end;local w={["nil"]=o,["table"]=q,["string"]=u,["number"]=v,["boolean"]=tostring}i=function(p,r)local x=type(p)local e=w[x]if e then return e(p,r)end;error("unexpected type '"..x.."'")end;function h.encode(p)return i(p)end;local y;local function z(...)local s={}for f=1,select("#",...)do s[select(f,...)]=true end;return s end;local A=z(" ","\t","\r","\n")local B=z(" ","\t","\r","\n","]","}",",")local C=z("\\","/",'"',"b","f","n","r","t","u")local D=z("true","false","null")local E={["true"]=true,["false"]=false,["null"]=nil}local function F(G,H,I,J)for f=H,#G do if I[G:sub(f,f)]~=J then return f end end;return#G+1 end;local function K(G,H,L)local M=1;local N=1;for f=1,H-1 do N=N+1;if G:sub(f,f)=="\n"then M=M+1;N=1 end end;error(string.format("%s at line %d col %d",L,M,N))end;local function O(t)local e=math.floor;if t<=0x7f then return string.char(t)elseif t<=0x7ff then return string.char(e(t/64)+192,t%64+128)elseif t<=0xffff then return string.char(e(t/4096)+224,e(t%4096/64)+128,t%64+128)elseif t<=0x10ffff then return string.char(e(t/262144)+240,e(t%262144/4096)+128,e(t%4096/64)+128,t%64+128)end;error(string.format("invalid unicode codepoint '%x'",t))end;local function P(Q)local R=tonumber(Q:sub(1,4),16)local S=tonumber(Q:sub(7,10),16)if S then return O((R-0xd800)*0x400+S-0xdc00+0x10000)else return O(R)end end;local function T(G,f)local s=""local U=f+1;local l=U;while U<=#G do local c=G:byte(U)if c<32 then K(G,U,"control character in string")elseif c==92 then s=s..G:sub(l,U-1)U=U+1;local g=G:sub(U,U)if g=="u"then local V=G:match("^[dD][89aAbB]%x%x\\u%x%x%x%x",U+1)or G:match("^%x%x%x%x",U+1)or K(G,U-1,"invalid unicode escape in string")s=s..P(V)U=U+#V else if not C[g]then K(G,U-1,"invalid escape char '"..g.."' in string")end;s=s..k[g]end;l=U+1 elseif c==34 then s=s..G:sub(l,U-1)return s,U+1 end;U=U+1 end;K(G,f,"expected closing quote for string")end;local function W(G,f)local c=F(G,f,B)local Q=G:sub(f,c-1)local t=tonumber(Q)if not t then K(G,f,"invalid number '"..Q.."'")end;return t,c end;local function X(G,f)local c=F(G,f,B)local Y=G:sub(f,c-1)if not D[Y]then K(G,f,"invalid literal '"..Y.."'")end;return E[Y],c end;local function Z(G,f)local s={}local t=1;f=f+1;while 1 do local c;f=F(G,f,A,true)if G:sub(f,f)=="]"then f=f+1;break end;c,f=y(G,f)s[t]=c;t=t+1;f=F(G,f,A,true)local _=G:sub(f,f)f=f+1;if _=="]"then break end;if _~=","then K(G,f,"expected ']' or ','")end end;return s,f end;local function a0(G,f)local s={}f=f+1;while 1 do local a1,p;f=F(G,f,A,true)if G:sub(f,f)=="}"then f=f+1;break end;if G:sub(f,f)~='"'then K(G,f,"expected string for key")end;a1,f=y(G,f)f=F(G,f,A,true)if G:sub(f,f)~=":"then K(G,f,"expected ':' after key")end;f=F(G,f+1,A,true)p,f=y(G,f)s[a1]=p;f=F(G,f,A,true)local _=G:sub(f,f)f=f+1;if _=="}"then break end;if _~=","then K(G,f,"expected '}' or ','")end end;return s,f end;local a2={['"']=T,["0"]=W,["1"]=W,["2"]=W,["3"]=W,["4"]=W,["5"]=W,["6"]=W,["7"]=W,["8"]=W,["9"]=W,["-"]=W,["t"]=X,["f"]=X,["n"]=X,["["]=Z,["{"]=a0}y=function(G,H)local _=G:sub(H,H)local e=a2[_]if e then return e(G,H)end;K(G,H,"unexpected character '".._.."'")end;function h.decode(G)if type(G)~="string"then error("expected argument of type string, got "..type(G))end;local s,H=y(G,F(G,1,A,true))H=F(G,H,A,true)if H<=#G then K(G,H,"trailing garbage")end;return s end;return h end)()
